<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
  <meta charset="UTF-8">
  <title>Java Documentation Overview</title>
  <meta name="author" content="Owen Astrachan, Drew Hilton, Susan Rodger, Robert Duvall">
  <link rel="icon" href="http://www.dukelearntoprogram.com/common/images/duke.gif" type="image/gif">
  <link rel="shortcut icon" href="http://www.dukelearntoprogram.com/common/images/duke.ico">
  <link rel="apple-touch-icon image_src" href="http://www.dukelearntoprogram.com/common/images/duke.png">
  <link rel="stylesheet" href="Java%20Documentation%20Overview_files/style.css" type="text/css">
</head>

<body>

<div class="titlebar">
  <img src="Java%20Documentation%20Overview_files/dukelogovert.png" id="dukeLogo">
  <img src="Java%20Documentation%20Overview_files/coursera.png" id="courseraLogo">
  <h1>Java Documentation Overview</h1>
</div>

<div class="navbar">
<table align="center" border="0" width="95%">
<tbody><tr>
  <td align="left"><a href="http://www.dukelearntoprogram.com/index.php">Duke Resources Home</a></td>
  <td align="center"><a href="http://www.dukelearntoprogram.com/course2/index.php">Duke Course 2 Home</a></td>
  <td align="right"><a href="https://www.coursera.org/learn/java-programming">Coursera Course 2 Home</a></td>
</tr>
</tbody></table>
</div>

<div class="content">
<div class="section">

<h3>Course Specific Classes</h3>
<div class="lessons">

<p>The methods included in these tables  are the ones used in this 
course, and the most commonly useful methods of each class. Links  are 
provided to the complete documentation  if you are interested.</p>
<p><a name="fileresource"></a>
</p>
<h4><a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/FileResource.html" target="_blank">FileResource</a></h4>
<p>This class provides methods for accessing a file on your computer. You can create a <code>FileResource</code> in a variety of ways:</p>
<ul>
  <li><code>new FileResource()</code>, opens a dialog box prompting you to select a file on your computer</li>
  <li><code>new FileResource("path/to/file.ext")</code>, uses the given <code>String</code> to find a file on your computer or within your BlueJ project</li>
  <li><code>new FileResource(existingFile)</code>, uses the given <code>File</code> (typically returned by using a <code>DirectoryResource</code>)</li>
</ul>
<p>For these examples, assume the variable <code>fr</code> has been created for a specific file.</p>
<table border="2" cellspacing="5" width="98%">
  <tbody><tr>
    <th>Method name</th>
    <th>Description</th>
    <th>Example</th>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/FileResource.html#lines--" target="_blank">lines</a>()</code></td>
    <td>returns an&nbsp;<code>Iterable</code>&nbsp;that  provides access to the contents of this opened file one line at a time</td>
    <td><pre>for (String line : fr.lines()) {
    // process each line in turn
}</pre></td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/FileResource.html#words--" target="_blank">words</a>()</code></td>
    <td>returns an&nbsp;<code>Iterable</code>&nbsp;that provides access to the contents of this opened file one word at a time</td>
    <td><pre>for (String word : fr.words()) {
    // process each word in turn
}</pre></td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/FileResource.html#asString--" target="_blank">asString</a>()</code></td>
    <td>returns the entire contents of this opened file as one String</td>
    <td><pre>String contents = fr.asString();</pre></td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/FileResource.html#getCSVParser--" target="_blank">getCSVParser</a>()</code></td>
    <td>returns a&nbsp;<code>CSVParser</code>&nbsp;object for this opened file, assuming it  contains comma separated values with a header row</td>
    <td><pre>CSVParser parser = fr.getCSVParser();</pre></td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/FileResource.html#getCSVParser-boolean-" target="_blank">getCSVParser</a>(false)</code></td>
    <td>returns a&nbsp;<code>CSVParser</code>&nbsp;object for this opened file, assuming it contains comma separated values <em>without</em> a header row</td>
    <td><pre>CSVParser parser = fr.getCSVParser(false);</pre></td>
  </tr>
</tbody></table>

<a name="urlresource"></a>
<h4><a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/URLResource.html" target="_blank">URLResource</a></h4>
<p>This class provides methods for accessing a web page. You can create a <code>URLResource</code> by giving it a complete URL, or web address (note, it <em>must</em> start with either <code>http://</code> or <code>https://</code>):</p>
<ul>
  <li><code>new URLResource("http://www.something.com/file.ext")</code>, uses the given address to download the referenced file</li>
  <li><code>new URLResource("https://www.something.com/file.ext")</code>, uses the given address to download the referenced file</li>
</ul>
<p>For these examples, assume the variable <code>ur</code> has been created for a specific URL.</p>
<table border="2" cellspacing="5" width="98%">
  <tbody><tr>
    <th>Method name</th>
    <th>Description</th>
    <th>Example</th>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/URLResource.html#lines--" target="_blank">lines</a>()</code></td>
    <td>returns an&nbsp;<code>Iterable</code>&nbsp;that provides access to the contents of this opened web page one line at a time</td>
    <td><pre>for (String line : ur.lines()) {
    // process each line in turn
}</pre></td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/URLResource.html#words--" target="_blank">words</a>()</code></td>
    <td>returns an&nbsp;<code>Iterable</code>&nbsp;that provides access to the contents of this opened web page one word at a time</td>
    <td><pre>for (String word : ur.words()) {
    // process each word in turn
}</pre></td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/URLResource.html#asString--" target="_blank">asString</a>()</code></td>
    <td>returns the entire contents of this opened web page as one String</td>
    <td><pre>String contents = ur.asString();</pre></td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/URLResource.html#getCSVParser--" target="_blank">getCSVParser</a>()</code></td>
    <td>returns a&nbsp;<code>CSVParser</code>&nbsp;object for this opened web page, assuming it contains comma separated values with a header row</td>
    <td><pre>CSVParser parser = ur.getCSVParser();</pre></td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/URLResource.html#getCSVParser-boolean-" target="_blank">getCSVParser</a>(false)</code></td>
    <td>returns a&nbsp;<code>CSVParser</code>&nbsp;object for this opened web page, assuming it contains comma separated values <em>without</em> a header row</td>
    <td><pre>CSVParser parser = ur.getCSVParser(false);</pre></td>
  </tr>
</tbody></table>

<a name="directoryresource"></a>
<h4><a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/DirectoryResource.html" target="_blank">DirectoryResource</a></h4>
<p>This class provides a method for choosing one or more files on your computer. You can only create a <code>DirectoryResource</code> with no parameters:</p>
<ul>
  <li><code>new DirectoryResource()</code></li>
</ul>
<p>For these examples, assume the variable <code>dr</code> has been created.</p>
<table border="2" cellspacing="5" width="98%">
  <tbody><tr>
    <th>Method name</th>
    <th>Description</th>
    <th>Example</th>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/DirectoryResource.html#selectedFiles--" target="_blank">selectedFiles</a>()</code></td>
    <td>returns an&nbsp;<code>Iterable</code>&nbsp;that provides access to each of the files selected by the user one at a time</td>
    <td><pre>for (File f : dr.selectedFiles()) {
    // process each file in turn
}</pre></td>
  </tr>
</tbody></table>

<a name="pixel"></a>
<h4><a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/Pixel.html" target="_blank">Pixel</a></h4>
<p>This class provides methods for accessing and changing a <a href="http://www.dukelearntoprogram.com/course1/doc/index.php#pixel">color within an image</a>. A <code>Pixel</code> can only be created by copying the values of an existing <code>Pixel</code>:</p>
<ul>
  <li><code>new Pixel(otherPixel)</code>, where <code>otherPixel</code> most likely was returned from the <code>ImageResource</code> method <code>getPixel(x, y)</code></li>
</ul>
<p>For these examples, assume </p>
<ul>
  <li><code>pix1</code> is a pixel at coordinate (100, 200) representing the color Duke blue, with RGBA values of (0, 26, 87, 255) <img src="Java%20Documentation%20Overview_files/duke_blue.png" alt="" height="10" width="20"> </li>
  <li><code>pix2</code> is a pixel at coordinate (300, 400) representing the color white, with RGBA values of (255, 255, 255, 255) <img src="Java%20Documentation%20Overview_files/white.png" alt="" height="10" width="20"> </li>
</ul>
<table border="2" cellspacing="5" width="98%">
  <tbody><tr>
    <th>Method name</th>
    <th>Description</th>
    <th>Example</th>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/Pixel.html#getX--" target="_blank">getX</a>()</code></td>
    <td>returns the pixel's x-coordinate within the image</td>
    <td><code>pix1.getX()</code> is 100</td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/Pixel.html#getY--" target="_blank">getY</a>()</code></td>
    <td>returns the pixel's y-coordinate within the image</td>
    <td><code>pix1.getY()</code> is 200</td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/Pixel.html#getRed--" target="_blank">getRed</a>()</code></td>
    <td>returns the value of the pixel's red component (always in the range 0-255)</td>
    <td><code>pix1.getRed()</code> is 0</td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/Pixel.html#getGreen--" target="_blank">getGreen</a>()</code></td>
    <td>returns the value of the pixel's green component (always in the range 0-255)</td>
    <td><code>pix1.getGreen()</code> is 26</td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/Pixel.html#getBlue--" target="_blank">getBlue</a>()</code></td>
    <td>returns the value of the pixel's blue component (always in the range 0-255)</td>
    <td><code>pix1.getBlue()</code> is 87</td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/Pixel.html#getAlpha--" target="_blank">getAlpha</a>()</code></td>
    <td>returns the value of the pixel's alpha, or transparency, component (always in the range 0-255)</td>
    <td><code>pix1.getAlpha()</code> is 255</td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/Pixel.html#setRed-int-" target="_blank">setRed</a>(newR)</code></td>
    <td>changes the value of the pixel's red component to <code>newR</code> (if <code>newR</code> is not in the range of 0-255 it is changed to be in that range)</td>
    <td><code>pix1.setRed(255)</code> changes the color to (255, 26, 87, 255) <img src="Java%20Documentation%20Overview_files/cherry.png" alt="" height="10" width="20"></td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/Pixel.html#setGreen-int-" target="_blank">setGreen</a>(newG)</code></td>
    <td>changes the value of the pixel's green component  to <code>newG</code> (if <code>newG</code> is not in the range of 0-255 it is changed to be in that range)</td>
    <td><code>pix1.setGreen(255)</code> changes the color to (0, 255, 87, 255) <img src="Java%20Documentation%20Overview_files/lime_green.png" alt="" height="10" width="20"></td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/Pixel.html#setBlue-int-" target="_blank">setBlue</a>(newB)</code></td>
    <td>changes the value of the pixel's blue component to <code>newB</code> (if <code>newB</code> is not in the range of 0-255 it is changed to be in that range)</td>
    <td><code>pix1.setBlue(255)</code> changes the color to (0, 26, 255, 255) <img src="Java%20Documentation%20Overview_files/bright_blue.png" alt="" height="10" width="20"></td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/Pixel.html#setAlpha-int-" target="_blank">setAlpha</a>(newA)</code></td>
    <td>changes the value of the pixel's alpha, or transparency, component to <code>newA</code> (if <code>newA</code> is not in the range of 0-255 it is changed to be in that range)</td>
    <td><code>pix1.setAlpha(100)</code> changes the color to (0, 26, 87, 100) <img src="Java%20Documentation%20Overview_files/duke_alpha.png" alt="" height="10" width="20"></td>
  </tr>
</tbody></table>

<a name="imageresource"></a>
<h4><a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/ImageResource.html" target="_blank">ImageResource</a></h4>
<p>This class provides methods for accessing attributes of an image, including each pixel in the image. You can create an <code>ImageResource</code> in a variety of ways:</p>
<ul>
  <li><code>new ImageResource()</code>, opens a dialog box prompting you to select an image file on your computer</li>
  <li><code>new ImageResource("path/to/image.jpg")</code>, uses the given <code>String</code> to find an image file on your computer or within your BlueJ project</li>
  <li><code>new ImageResource(existingFile)</code>, uses the given <code>File</code> (typically returned by using a <code>DirectoryResource</code>)</li>
  <li><code>new ImageResource(width, height)</code>, creates an empty image (all black) of the given size in pixels</li>
  <li><code>new ImageResource(otherImage)</code>, creates an  image that is an exact copy of  <code>otherImage</code></li>
  <img src="Java%20Documentation%20Overview_files/duke_blue_devil.png" alt="Duke Blue Devil" align="right" height="85" width="100">
</ul>
<p>
For these examples, assume the variable <code>logo</code> has the value of the image to the right. It is 100 pixels wide and 85 pixels tall.
</p>
<table border="2" cellspacing="5" width="98%">
  <tbody><tr>
    <th>Method name</th>
    <th>Description</th>
    <th>Example</th>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/ImageResource.html#getWidth--" target="_blank">getWidth</a>()</code></td>
    <td>returns the image's width, or number of pixels in the X direction</td>
    <td><code>logo.getWidth()</code> is 100</td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/ImageResource.html#getHeight--" target="_blank">getHeight</a>()</code></td>
    <td>returns the image's height, or number of pixels in the Y direction</td>
    <td><code>logo.getHeight()</code> is 85</td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/ImageResource.html#getPixel-int-int-" target="_blank">getPixel</a>(x,y)</code></td>
    <td>returns the pixel in this image at the coordinate (<code>x</code>, <code>y</code>)</td>
    <td><code>logo.getPixel(0, 0)</code> is the pixel (255, 255, 255, 255) <img src="Java%20Documentation%20Overview_files/white.png" alt="" height="10" width="20"></td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/ImageResource.html#setPixel-int-int-edu.duke.Pixel-" target="_blank">setPixel</a>(x,y,pixel)</code></td>
    <td>copies the RGBA values from the given pixel into pixel at the (x,y) coordinates given</td>
    <td><code>logo.setPixel(50, 42, pix2)</code> changes the color to white <img src="Java%20Documentation%20Overview_files/white.png" alt="" height="10" width="20"></td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/ImageResource.html#pixels--" target="_blank">pixels</a>()</code></td>
    <td>returns an&nbsp;<code>Iterable</code>&nbsp;that provides access 
to each of the pixels in the image, starting in the upper-left corner 
and moving down to the lower-right corner</td>
    <td><pre>for (Pixel p : logo.pixels()) {
    // process each pixel in turn
}</pre></td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/ImageResource.html#draw--" target="_blank">draw</a>()</code></td>
    <td>draws the image in a separate window</td>
    <td><pre>logo.draw();</pre></td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/ImageResource.html#save--" target="_blank">save</a>()</code></td>
    <td>saves the changes made to this image using its current file name</td>
    <td><code>logo.save()</code>;</td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/ImageResource.html#getFileName--" target="_blank">getFileName</a>()</code></td>
    <td>returns the current file name of this image, or the empty string, <code>""</code>, if it was created as an empty image</td>
    <td><code>String name = logo.getFileName()</code>;</td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/ImageResource.html#setFileName-java.lang.String-" target="_blank">setFileName</a>(newName)</code></td>
    <td>changes the current file name of this image to the given name, 
useful when saving your changed image without modifying the original 
image on your computer</td>
    <td><code>logo.setFileName("changed.jpg")</code>;</td>
  </tr>
</tbody></table>

<a name="storageresource"></a>
<h4><a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/StorageResource.html" target="_blank">StorageResource</a></h4>
<p>This class provides methods for storing and accessing a list of 
strings of any length. Generally you will start by creating an empty <code>StorageResource</code>, then adding string values as you find them in a file or web page:</p>
<ul>
  <li><code>new StorageResource()</code>, creates an empty list</li>
  <li><code>new StorageResource(otherList)</code>, creates a list that is an exact copy of  <code>otherList</code></li>
  </ul>
<p>For these examples, assume the variable <code>sr</code> has been created.</p>
<table border="2" cellspacing="5" width="98%">
  <tbody><tr>
    <th>Method name</th>
    <th>Description</th>
    <th>Example</th>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/StorageResource.html#add-java.lang.String-" target="_blank">add</a>(item)</code></td>
    <td>adds the given <code>item</code> to the end of the list of strings</td>
    <td><pre>sr.add("first!");
sr.add("next ...");</pre>
    </td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/StorageResource.html#size--" target="_blank">size</a>()</code></td>
    <td>returns the number of strings stored in this list</td>
    <td><code>sr.size()</code> is 2 (after the example above)<br>
        <code>sr.size()</code> is 0 (immediately after <code>clear()</code> is called)
    </td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/StorageResource.html#data--" target="_blank">data</a>()</code></td>
    <td>returns an&nbsp;<code>Iterable</code>&nbsp;that provides access to each string in the list one at a time</td>
    <td><pre>for (String item : sr.data()) {
    // process each string in turn
}</pre></td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/StorageResource.html#contains-java.lang.String-" target="_blank">contains</a>(item)</code></td>
    <td>returns true only if the given <code>item</code> is in the list</td>
    <td><code>sr.contains("first!")</code> is true<br>
        <code>sr.contains("last")</code> is false
    </td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/StorageResource.html#clear--" target="_blank">clear</a>()</code></td>
    <td>removes all strings from this list, making it empty</td>
    <td><pre>sr.clear();</pre></td>
  </tr>
</tbody></table>

<p><a name="rangeresource"></a>
</p>
<h4><a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/RangeResource.html" target="_blank">RangeResource</a></h4>
<p>This class provides methods for accessing a sequence of numbers within a given range. You can create a <code>RangeResource</code> in a variety of ways:</p>
<ul>
  <li><code>new RangeResource(end)</code>, create a sequence of numbers starting at 0 and going up to, but not including, <code>end</code></li>
  <li><code>new RangeResource(start, end)</code>, create a sequence of numbers starting at <code>start</code> and going up to, but not including, <code>end</code></li>
  <li><code>new RangeResource(start, end, increment)</code>, create a sequence of numbers starting at <code>start</code> and going up to, but not including, <code>end</code>, counting by <code>increment</code></li>
</ul>
<p>For these examples, assume the variable <code>rr</code> has been created.</p>
<table border="2" cellspacing="5" width="98%">
  <tbody><tr>
    <th>Method name</th>
    <th>Description</th>
    <th>Example</th>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/edu/duke/RangeResource.html#sequence--" target="_blank">sequence</a>()</code></td>
    <td>returns an&nbsp;<code>Iterable</code>&nbsp;that provides access to each number in the sequence</td>
    <td><pre>for (int i : rr.sequence()) {
    // process each number in turn
}</pre></td>
  </tr>
</tbody></table>
</div>

<h3>Apache Commons CSV Classes</h3>
<div class="lessons">

<p>The methods included in these tables  are the ones used in this 
course, and the most commonly useful methods of each class. Links  are 
provided to the complete documentation  if you are interested.</p>
<p><a name="csvrecord"></a> </p>
<h4><a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/org/apache/commons/csv/CSVRecord.html" target="_blank">CSVRecord</a></h4>
<p>This class provides methods for accessing individual data values in a line of data within <a href="#csv">a CSV formatted file</a>. You cannot create a <code>CSVRecord</code> directly, instead it will be provided for you when you iterate using a <code>CSVParser</code>. Data values are always returned as a <code>String</code>, so you will need to convert any values you plan to use in your calculations to <a href="#converting">the appropriate numeric value</a>.</p>
<p>For these examples, assume the variable <code>rec</code> has been created for the second row of data below (the first line represents the header row that names the columns of data).</p>
<blockquote>
  <pre>Name,Food,Color,Number
Fred,Pizza,Purple,13</pre></blockquote>
<table border="2" cellspacing="5" width="98%">
  <tbody><tr>
    <th>Method name</th>
    <th>Description</th>
    <th>Example</th>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/org/apache/commons/csv/CSVRecord.html#get-java.lang.String-" target="_blank">get</a>(columnName)</code></td>
    <td>returns a <code>String</code>, the data in this record corresponding to the column with the given <code>columnName<br>
      </code>it is an error if the columnName does not exist in the header row (or does not have the same case) </td>
    <td><code>rec.get("Name")</code> is "Fred"<br>
      <code>rec.get("Food")</code> is "Pizza"</td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/org/apache/commons/csv/CSVRecord.html#get-int-" target="_blank">get</a>(columnIndex)</code></td>
    <td>returns a <code>String</code>, the data in this record corresponding to the column at the given <code>columnIndex<br>
      </code>note, the index of the first data value is 0</td>
    <td><code>rec.get(0)</code> is "Fred"<br>
      <code>rec.get(3)</code> is "13"</td>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/org/apache/commons/csv/CSVRecord.html#size--" target="_blank">size</a>()</code></td>
    <td>returns the number of values in this record<code></code></td>
    <td><code>rec.size()</code> is 4</td>
  </tr>
</tbody></table>

<p><a name="csvparser"></a> </p>
<h4><a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/org/apache/commons/csv/CSVParser.html" target="_blank">CSVParser</a></h4>
<p>This class provides you the ability to iterate over each line of data
 within a CSV formatted file as a record of the individual data values. 
Most likely you will not call any  methods directly on a <code>CSVParser</code> object, but use it as an <code>Iterable</code>
 within your loop (you do not even have to call a method to do so, just 
use the object itself). In any case, here is one possibly useful method.</p>
<table border="2" cellspacing="5" width="98%">
  <tbody><tr>
    <th>Method name</th>
    <th>Description</th>
  </tr>
  <tr>
    <td><code>.<a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/org/apache/commons/csv/CSVParser.html#getCurrentLineNumber--" target="_blank">getCurrentLineNumber</a>()</code></td>
    <td>returns the line number of the current record in the iteration</td>
  </tr>
</tbody></table>
</div>

<h3>Standard Java Classes</h3>
<div class="lessons">

<p>The methods included in these tables  are the ones used in this 
course, and the most commonly useful methods of each class. Links  are 
provided to the complete documentation  if you are interested.</p>

<p><a name="string"></a></p>
<h4><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html" target="_blank">String</a></h4>
<p>This class provides methods for  accessing a sequence of characters of any length.</p>
<p>For these examples, assume the variable <code>s</code> has the value <code>"Colorful"</code></p>

<table border="2" cellspacing="5" width="98%">
<tbody><tr>
  <th>Name
  </th><th>Returns
  </th><th>Example</th>
</tr>
<tr>
  <td><code>.<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#equals-java.lang.Object-" target="_blank">equals</a>(other)</code></td>
  <td>returns true only if this string has the same characters and in the same order as the other string</td>
  <td><code>s.equals("Colorful")</code> is true<br>
      <code>s.equals("colorful")</code> is false
  </td>
</tr>
<tr>
  <td><code>.<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#equalsIgnoreCase-java.lang.String-" target="_blank">equalsIgnoreCase</a>(other)</code></td>
  <td>returns true only if this string has the same characters and in the same order as the other string, regardles of case</td>
  <td><code>s.equalsIgnoreCase("Colorluf")</code> is false<br>
      <code>s.equalsIgnoreCase("colorful")</code> is true
  </td>
</tr>
<tr>
<td><code>.<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#length--" target="_blank">length</a>()</code></td>
<td>returns  number of characters in this string</td>
<td><code>s.length() is 8</code> <br>
    <code>"".length()</code> is 0
</td>
</tr>
<tr>
<td><code>.<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#indexOf-java.lang.String-" target="_blank">indexOf</a>(str)</code></td>
<td> returns the index within this string of the first occurrence of the given string <br>
  note, indices returned start at 0, the first character in the string, and go to <code>s.length()-1</code>, the last character<br>
note, returns -1 if the given string is not in this string</td>
<td><code>s.indexOf("l")</code> is 2<br>
    <code>s.indexOf("ful")</code> is 5
</td>
</tr><tr>
<td><code>.<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#indexOf-java.lang.String-int-" target="_blank">indexOf</a>(str, startIndex)</code></td>
<td>returns the index within this string of the first occurrence of the given string, starting at <code>startIndex</code><br>
note,  indices returned start at 0, the first character in the string, and go to <code>s.length()-1</code>, the last character<br>
note, returns -1 if the given string is not in this string
</td>
<td><code>s.indexOf("l", 3)</code> is 7<br>
    <code>s.indexOf("o", 1)</code> is 1
</td>
</tr>
<tr>
<td><code>.<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#substring-int-" target="_blank">substring</a>(startIndex)</code></td>
<td> returns a string with the characters of this string, starting from <code>startIndex</code> and going to the end of this string<br>
  note,  indices given start at 0, the first character in the string, and go to <code>s.length()-1</code>, the last character</td>
<td><code>s.substring(1)</code> is "olorful"<br>
    <code>s.substring(5)</code> is "ful"
</td>
</tr>
<tr>
  <td><code>.<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#substring-int-int-" target="_blank">substring</a>(startIndex, endIndex)</code></td>
  <td>returns a string with the characters of this string, starting from <code>startIndex</code> and going up to, but not including, the character at <code>endIndex</code><br>
note, indices given start at 0, the first character in the string, and go to <code>s.length()-1</code>, the last character</td>
  <td><code>s.substring(1, 2)</code> is "o"<br>
      <code>s.substring(1, 4)</code> is "olo" </td>
</tr>
<tr>
  <td><code>.<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#toLowerCase--" target="_blank">toLowerCase</a>()</code></td>
  <td>returns a string with the same characters as this string, but  with all letters lowercased</td>
  <td><code>s.toLowerCase()</code> is "colorful"</td>
</tr>
<tr>
  <td><code>.<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#toUpperCase--" target="_blank">toUpperCase</a>()</code></td>
  <td>returns a string with the same characters as this string, but  with all letters uppercased</td>
  <td><code>s.toUpperCase()</code> is "COLORFUL"</td>
</tr>
<tr>
  <td><code>.<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#startsWith-java.lang.String-" target="_blank">startsWith</a>(prefix)</code></td>
  <td>returns true only if this string starts with given prefix</td>
  <td><code>s.startswith("Color")</code> is true<br>
      <code>s.startswith("cool")</code> is false </td>
</tr>
<tr>
  <td><code>.<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#endsWith-java.lang.String-" target="_blank">endsWith</a>(suffix)</code></td>
  <td>returns true only if this string ends with given suffix</td>
  <td><code>s.endswith("ful")</code> is true<br>
      <code>s.endswith("fool")</code> is false </td>
</tr>
</tbody></table>

<a name="math"></a>
<h4><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html" target="_blank">Math</a></h4>
<p>The class provides methods for performing common numeric functions.</p>
<p>
  For these examples, assume the variable <code>a</code> has the value <code>25</code>, and <code>b</code> has the value <code>-9</code>
</p>

<table border="2" cellspacing="5" width="98%">
<tbody><tr>
  <th>Name
  </th><th>Returns
  </th><th>Example</th>
</tr>
<tr>
  <td><code>.<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#max-int-int-" target="_blank">max</a>(num1, num2)</code></td>
  <td>returns  the larger of two&nbsp;given numbers</td>
  <td><code>Math.max(a, b)</code> is 25</td>
</tr>
<tr>
  <td><code>.<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#min-int-int-" target="_blank">min</a>(num1, num2)</code></td>
  <td>returns the smaller of two&nbsp;given numbers</td>
  <td><code>Math.min(a, b)</code> is -9</td>
</tr>
<tr>
  <td><code>.<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#abs-double-" target="_blank">abs</a>(num)</code></td>
  <td>returns the absolute value of the given number</td>
  <td><code>Math.abs(a)</code> is 25<br>
      <code>Math.abs(b)</code> is 9</td>
</tr>
<tr>
  <td><code>.<a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#sqrt-double-" target="_blank">sqrt</a>(num)</code></td>
  <td>returns  the positive square root of the given number</td>
  <td><code>Math.sqrt(a)</code> is 5<br>
      <code>Math.sqrt(Math.abs(b))</code> is 3</td>
</tr>
</tbody></table>

<a name="file"></a>
<h4><a href="https://docs.oracle.com/javase/8/docs/api/java/io/File.html" target="_blank">File</a></h4>
<p>This class is Java's standard way to access a file on your computer, 
but it is not easy to use so, for this course, we have provided an 
alternate, <code>FileResource</code>. Most likely you will not call any  methods directly on a <code>File</code> object returned from the <code>DirectoryResource</code> method <code>selectedFiles()</code>, but just use it to create another Resource object (like an image). In any case, here are a few useful methods.</p>
<table border="2" cellspacing="5" width="98%">
  <tbody><tr>
  <th>Name
  </th><th>Returns  </th></tr>
<tr>
  <td><code>.<a href="https://docs.oracle.com/javase/8/docs/api/java/io/File.html#getCanonicalPath--" target="_blank">getCanonicalPath</a>()</code></td>
  <td>returns the unique name of this file, i.e., where it is on the computer</td>
  </tr>
<tr>
  <td><code>.<a href="https://docs.oracle.com/javase/8/docs/api/java/io/File.html#getName--" target="_blank">getName</a>()</code></td>
  <td>returns the name of this file, not including where it is on the computer</td>
  </tr>
<tr>
  <td><code>.<a href="https://docs.oracle.com/javase/8/docs/api/java/io/File.html#length--" target="_blank">length</a>()</code></td>
  <td>returns the length of this file</td>
</tr>
</tbody></table>
</div>


<h3>Standard Java Operators</h3>
<div class="lessons">

<a name="arithmetic"></a>
<h4>Arithmetic Operators</h4>

<table border="2" cellspacing="5">
<tbody><tr>
 <th>Operator</th>
 <th>Description</th>
 <th>Example</th>
</tr>
<tr>
  <td><code>+</code></td>
  <td>addition</td>
  <td><code>4 + 5</code> is 9</td>
</tr>
<tr>
  <td><code>-</code></td>
  <td>subtraction</td>
  <td><code>9 - 5</code> is 4</td>
</tr> 
<tr>
  <td><code>*</code></td>
  <td>multiplication</td> 
  <td><code>3 * 5</code> is 15</td>
</tr>
<tr>
  <td><code>/</code></td>
  <td>division</td>
  <td><code>6 / 3</code> is 2<br>
      <code>6 / 4</code> is 1<br>
      <code>6.0 / 4</code> is 1.5
  </td>
</tr>
<tr>
  <td><code>%</code></td>
  <td>mod, or remainder</td>
  <td><code>5 % 3</code> is 2</td>
</tr> 
<tr>
  <td colspan="2"><em>A shorthand version of each of these exists to update a variable that appears on both sides of the assignment. <br>
    For example, the statement:</em> <code>x = x + 1</code> <em>can be shortened to:</em> <code>x += 1</code></td>
  <td><code>x = 1</code> sets <code>x</code> to 1<br>
      <code>x += 1</code> sets <code>x</code> to 2<br>
      <code>x *= 2</code> sets <code>x</code> to 4
  </td>
</tr>
</tbody></table>

<a name="comparing"></a>
<h4>Comparing Primitive Values</h4>

<table border="2" cellspacing="5" width="98%">
<tbody><tr>
 <th>Operator</th>
 <th>Description</th>
 <th>Example</th>
</tr>
<tr>
  <td><code>==</code></td>
  <td>is equal to</td>
  <td><code>3 == 3</code> is true</td>
</tr>
<tr>
  <td><code>!=</code></td>
  <td>is not equal to</td>
  <td><code>3 != 3</code> is false</td>
</tr>
<tr>
  <td><code>&gt;=</code></td>
  <td>is greater than or equal to</td>
  <td><code>4 &gt;= 3</code> is true</td>
</tr>
<tr>
  <td><code>&lt;=</code></td>
  <td>is less than or equal to</td>
  <td><code>4 &lt;= 3</code> is false</td>
</tr>
<tr>
  <td><code>&gt;</code></td>
  <td>is strictly greater than</td>
  <td><code>4 &gt; 3</code> is true</td>
</tr>
<tr>
  <td><code>&lt;</code></td>
  <td>is strictly less than</td>
  <td><code>3 &lt; 3</code> is false</td>
</tr>
</tbody></table>

<a name="combining_comparisons"></a>
<h4>Combining Comparisons - Logic Operators</h4>

<p>For these examples, assume the variable <code>x</code> has the value 5.

</p><table border="2" cellspacing="5" width="98%">
<tbody><tr>
 <th>Operator</th>
 <th>Description</th>
 <th>Example</th>
</tr>
<tr>
  <td><code>||</code></td>
  <td>returns true if at least one part of it is true<br>
      note, if the first comparison is true, subsequent comparisons are not done</td>
  <td><code>(x &lt; 3 || x &gt; 7)</code> is false<br>
      <code>(x &lt; 3 || x &lt; 7)</code> is true </td>
</tr>
<tr>
  <td><code>&amp;&amp;</code></td>
  <td>returns true only if both parts of it are true<br>
      note, if the first comparison is false, subsequent comparisons are not done</td>
  <td><code>(x &gt; 3 &amp;&amp; x &lt; 7)</code> is true<br>
      <code>(x &gt; 3 &amp;&amp; x &gt; 7)</code> is false </td>
</tr>
<tr>
  <td><code>!</code></td>
  <td>flips the value of a comparison or boolean</td>
  <td><code>(! x == 5)</code> is false</td>
</tr>
</tbody></table>

<a name="converting"></a>
<h4>Converting Between Types</h4>
<table border="2" cellspacing="5" width="98%">
<tbody><tr>
  <td><code><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Integer.html#parseInt-java.lang.String-" target="_blank">Integer.parseInt</a>(s)</code></td>
  <td>turn the String s into an integer value<br>
    note, this can fail, e.g., <code>Integer.parseInt("abc")</code> throws an exception</td>
  <td><code>Integer.parseInt("123")</code> is the number 123</td>
</tr>
<tr>
  <td><code><a href="https://docs.oracle.com/javase/8/docs/api/java/lang/Double.html#parseDouble-java.lang.String-" target="_blank">Double.parseDouble</a>(s)</code></td>
  <td>turn the String s into a real valued number<br>
    note, this can fail, e.g., <code>Double.parseDouble("abc")</code> throws an exception</td>
  <td><code>Double.parseDouble("2.46")</code> is the number 2.46</td>
</tr>
<tr>
  <td><code>(int)x</code></td>
  <td>turn x into an integer value by truncating the fractional part of the number</td>
  <td><code>(int)123.6</code> is 123</td>
</tr>
<tr>
  <td><code>(double)x</code></td>
  <td>turn x into a real valued number, for example if you wanted to calculate the average of several integer values</td>
  <td><code>(double)123</code> is 123.0</td>
</tr>
</tbody></table>
</div>


<h3>Background Information</h3>
<div class="lessons">

<a name="iterator"></a>
<h4>What is an Iterable?</h4>
<p>
Iterators provide a way to work with data where each item of the data is processed in turn, considering each item one at a time.
</p>

<p>
For example, suppose you wanted to add a bunch of numbers, like 3, 4, 7,
 3, 1, 8, 10.  It is possible that you would solve this by writing one 
big addition problem:

</p><blockquote>
<pre>   3
   4
   7
   3
   1
   8
+ 10
____</pre>
</blockquote>

<p>It is more likely, however, that you would add the numbers one at a time, like this:</p>
<blockquote>
  <pre>3 + 4 = 7; 7 + 7 = 14; 14 + 3 = 17; 17 + 1 = 18; 18 + 8 = 26; 26 + 10 = 36</pre>
</blockquote>
<p>It is generally easier to think about it one item at a time, so using
 this "running total" way of processing helps us iterate over (or 
consider individually) the numbers. In the same way, it is typically 
easier to write an algoithm which  processes only one item of data at a 
time. </p>
<p>In Java, data is represented in a wide variety of ways, not just 
numbers.  We may need to work with each word in a file, darken each 
pixel in an image, or open all files in a directory.  In each case, we 
need a way to access the elements of the data one at a time, in order.  
Iterables provide a convenient way to do this because, no matter what 
type of things are in the data, they give  one standard syntax to access
 each thing. </p>
<p>Imagine a vending machine.  The machine maintains a line of products,
 and when a customer buys something, it dispenses the next one in line. 
 You probably feel confident that you could use such a machine, right?  
Notice that we have not disclosed what product is being vended.  It does
 not really matter.  You are able to easily use any vending machine, 
whether it is dispensing soda, chips, novels (now seen in airports), or 
live bait (at a fishing spot - really!).  That's because the way the 
machine works does not generally depend on what the product is.  That is
 the beauty of Iterables.  Once you learn to use them, you will feel 
confident that you can process any kind of data that you encounter.</p>
</div>
</div>

<div class="toc">
<p><a href="http://www.dukelearntoprogram.com/course2/doc/javadoc/index.html?course=2">Complete Documentation</a></p>
<p>Course Specific Classes</p>
  <ul>
    <li><a href="#fileresource">FileResource</a></li>
    <li><a href="#urlresource">URLResource</a></li>
    <li><a href="#directoryresource">DirectoryResource</a></li>
    <li><a href="#pixel">Pixel</a></li>
    <li><a href="#imageresource">ImageResource</a></li>
    <li><a href="#storageresource">StorageResource</a></li>
    <li><a href="#rangeresource">RangeResource</a></li>
  </ul>
<p>Apache Commons CSV Classes</p>
<ul>
  <li><a href="#csvrecord">CSVRecord</a></li>
  <li><a href="#csvparser">CSVParser</a></li>
</ul>
<p>Standard Java Classes</p>
  <ul>
    <li><a href="#string">String</a></li>
    <li><a href="#math">Math</a></li>
    <li><a href="#file">File</a></li>
  </ul>
<p>Standard Java Operators</p>
  <ul>
    <li><a href="#arithmetic">Arithmetic Operations</a></li>
    <li><a href="#comparing">Comparing Primitive Values</a></li>
    <li><a href="#combining_comparisons">Combining Comparisons</a></li>
    <li><a href="#converting">Converting Between Types</a></li>
  </ul>
<p>Background Information</p>
  <ul>
    <li><a href="#iterator">What is an Iterator?</a></li>
    <li><a href="#csv">CSV Data Files</a></li>
  </ul>
</div>

</div>

<div class="footer">
<p>
<a rel="license" href="http://creativecommons.org/licenses/by/4.0/"><img alt="Creative Commons License" style="border-width:0" src="Java%20Documentation%20Overview_files/88x31.png"></a><br>
Material accessible from this webpage developed by the instructors at Duke University is licensed under a <a rel="license" href="http://creativecommons.org/licenses/by/4.0/">Creative Commons Attribution 4.0 International License</a>.
</p>

<!-- Apache license 
<a rel="license" href="http://www.apache.org/licenses/LICENSE-2.0.html"><img alt="Apache License" style="border-width:0" src="http://www.apache.org/img/asf_logo.png" width="120" height="31"></a><br />The code for this work is licensed under a <a rel="license" href="http://www.apache.org/licenses/LICENSE-2.0.html">Apache License Version 2.0</a>.
-->
</div>

<!-- WhichBrowser -->
<script src="Java%20Documentation%20Overview_files/analytics.js" async=""></script><script>
function waitForWhichBrowser(cb) {
    var callback = cb;
    function wait() {
        if (typeof WhichBrowser == 'undefined') 
            window.setTimeout(wait, 100)
        else 
            callback();
    }
    wait();
}
waitForWhichBrowser(function() {
    var o = document.createElement('div');
	o.id = 'warning';
    try {
        Browsers = new WhichBrowser({ useFeatures: true, detectCamouflage: true });
        if (Browsers.isBrowser('Safari', '>', '0')) {
            o.innerHTML = 'Unfortunately, some features of our JavaScript programming environment are not compatible with the browser you are using. This <a href="../common/saving.php">link</a> explains an alernate way to save your work.';
			document.body.insertBefore(o, document.getElementsByClassName('content')[0]);
        }
        else if (Browsers.isBrowser('Internet Explorer', '>', '0') || Browsers.isBrowser('Edge', '>', '0')) {
            o.innerHTML = 'Unfortunately, our JavaScript programming environment is not compatible with any version of Microsoft\'s Internet Explorer/Edge browser. We suggest you use the latest version of either <a href="https://www.mozilla.org/download">Firefox</a> or <a href="https://www.google.com/chrome/browser/index.html">Chrome</a> instead.';
			document.body.insertBefore(o, document.getElementsByClassName('content')[0]);
        }
		else if (! Boolean(document.createElement('canvas').getContext)) {
			o.innerHTML = 'Unfortunately, you are using an older version of your browser that is not compatible with our JavaScript programming environment. We suggest you download and install the latest version of your of these browser before continuing.';
			document.body.insertBefore(o, document.getElementsByClassName('content')[0]);
		}
    } catch (e) {
        console.log('WhichBrowser error: ' + e);
    }
});
</script>

<!-- Google analytics -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
  ga('create', 'UA-66891748-1', 'auto');
  ga('send', 'pageview');
</script>




</body></html>